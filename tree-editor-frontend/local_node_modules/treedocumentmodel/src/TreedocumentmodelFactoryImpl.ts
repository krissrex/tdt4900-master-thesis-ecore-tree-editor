import { EFactoryImpl } from "crossecore/lib/EFactoryImpl";
import { EClass } from "crossecore/lib/EClass";
import { EDataType } from "crossecore/lib/EDataType";
import { EObject } from "crossecore/lib/EObject";
import { TreeNodeImpl } from "./TreeNodeImpl";
import { TreeDocumentImpl } from "./TreeDocumentImpl";
import { Action } from "./Action";
import { ActionEvent } from "./ActionEvent";
import { NodeIconImpl } from "./NodeIconImpl";
import { NodeTypeToNodeTypesMapImpl } from "./NodeTypeToNodeTypesMapImpl";
import { TreedocumentmodelFactory } from "./TreedocumentmodelFactory";
import { TreeDocument } from "./TreeDocument";
import { TreedocumentmodelPackageImpl } from "./TreedocumentmodelPackageImpl";
import { NodeTypeToIconDataUriMapImpl } from "./NodeTypeToIconDataUriMapImpl";
import { NodeTypeToNodeTypesMap } from "./NodeTypeToNodeTypesMap";
import { ActionIdToNodeTypeMap } from "./ActionIdToNodeTypeMap";
import { HierarchyConfiguration } from "./HierarchyConfiguration";
import { NodeTypeToIconDataUriMap } from "./NodeTypeToIconDataUriMap";
import { ActionIdToNodeTypeMapImpl } from "./ActionIdToNodeTypeMapImpl";
import { TreeNode } from "./TreeNode";
import { ActionImpl } from "./ActionImpl";
import { HierarchyConfigurationImpl } from "./HierarchyConfigurationImpl";
import { ActionConfigurationImpl } from "./ActionConfigurationImpl";
import { ActionConfiguration } from "./ActionConfiguration";
import { NodeIcon } from "./NodeIcon";
import { ActionEventImpl } from "./ActionEventImpl";
export class TreedocumentmodelFactoryImpl extends EFactoryImpl
  implements TreedocumentmodelFactory {
  public static eINSTANCE: TreedocumentmodelFactory = TreedocumentmodelFactoryImpl.init();
  public static init(): TreedocumentmodelFactory {
    return new TreedocumentmodelFactoryImpl();
  }

  public createTreeNode = (): TreeNode => {
    let theTreeNode = new TreeNodeImpl();

    return theTreeNode;
  };
  public createTreeDocument = (): TreeDocument => {
    let theTreeDocument = new TreeDocumentImpl();

    return theTreeDocument;
  };
  public createHierarchyConfiguration = (): HierarchyConfiguration => {
    let theHierarchyConfiguration = new HierarchyConfigurationImpl();

    return theHierarchyConfiguration;
  };
  public createNodeTypeToNodeTypesMap = (): NodeTypeToNodeTypesMap => {
    let theNodeTypeToNodeTypesMap = new NodeTypeToNodeTypesMapImpl();

    return theNodeTypeToNodeTypesMap;
  };
  public createAction = (): Action => {
    let theAction = new ActionImpl();

    return theAction;
  };
  public createActionConfiguration = (): ActionConfiguration => {
    let theActionConfiguration = new ActionConfigurationImpl();

    return theActionConfiguration;
  };
  public createActionIdToNodeTypeMap = (): ActionIdToNodeTypeMap => {
    let theActionIdToNodeTypeMap = new ActionIdToNodeTypeMapImpl();

    return theActionIdToNodeTypeMap;
  };
  public createNodeTypeToIconDataUriMap = (): NodeTypeToIconDataUriMap => {
    let theNodeTypeToIconDataUriMap = new NodeTypeToIconDataUriMapImpl();

    return theNodeTypeToIconDataUriMap;
  };
  public createNodeIcon = (): NodeIcon => {
    let theNodeIcon = new NodeIconImpl();

    return theNodeIcon;
  };
  public createActionEvent = (): ActionEvent => {
    let theActionEvent = new ActionEventImpl();

    return theActionEvent;
  };

  public create(eClass: EClass): EObject {
    switch (eClass.getClassifierID()) {
      case TreedocumentmodelPackageImpl.TREENODE:
        return this.createTreeNode();
      case TreedocumentmodelPackageImpl.TREEDOCUMENT:
        return this.createTreeDocument();
      case TreedocumentmodelPackageImpl.HIERARCHYCONFIGURATION:
        return this.createHierarchyConfiguration();
      case TreedocumentmodelPackageImpl.NODETYPETONODETYPESMAP:
        return this.createNodeTypeToNodeTypesMap();
      case TreedocumentmodelPackageImpl.ACTION:
        return this.createAction();
      case TreedocumentmodelPackageImpl.ACTIONCONFIGURATION:
        return this.createActionConfiguration();
      case TreedocumentmodelPackageImpl.ACTIONIDTONODETYPEMAP:
        return this.createActionIdToNodeTypeMap();
      case TreedocumentmodelPackageImpl.NODETYPETOICONDATAURIMAP:
        return this.createNodeTypeToIconDataUriMap();
      case TreedocumentmodelPackageImpl.NODEICON:
        return this.createNodeIcon();
      case TreedocumentmodelPackageImpl.ACTIONEVENT:
        return this.createActionEvent();
      default:
        throw new Error(
          "The class '" + eClass.name + "' is not a valid classifier"
        );
    }
  }

  public createFromString(eDataType: EDataType, initialValue: string): any {
    switch (eDataType.getClassifierID()) {
      case TreedocumentmodelPackageImpl.ACTIONID:
        return this.createActionIdFromString(eDataType, initialValue);
      case TreedocumentmodelPackageImpl.NODETYPE:
        return this.createNodeTypeFromString(eDataType, initialValue);
      case TreedocumentmodelPackageImpl.ICONDATAURI:
        return this.createIconDataUriFromString(eDataType, initialValue);
      default:
        throw new Error(
          "The datatype '" + eDataType.name + "' is not a valid classifier"
        );
    }
  }
  public convertToString(eDataType: EDataType, instanceValue: any): string {
    switch (eDataType.getClassifierID()) {
      case TreedocumentmodelPackageImpl.ACTIONID:
        return this.convertActionIdToString(eDataType, instanceValue);
      case TreedocumentmodelPackageImpl.NODETYPE:
        return this.convertNodeTypeToString(eDataType, instanceValue);
      case TreedocumentmodelPackageImpl.ICONDATAURI:
        return this.convertIconDataUriToString(eDataType, instanceValue);
      default:
        throw new Error(
          "The datatype '" + eDataType.name + "' is not a valid classifier"
        );
    }
  }

  public createActionIdFromString(
    eDataType: EDataType,
    initialValue: string
  ): string {
    return initialValue == null ? null : JSON.parse(initialValue);
  }

  public convertActionIdToString(
    eDataType: EDataType,
    instanceValue: any
  ): string {
    return instanceValue === null ? null : JSON.stringify(instanceValue);
  }
  public createNodeTypeFromString(
    eDataType: EDataType,
    initialValue: string
  ): string {
    return initialValue == null ? null : JSON.parse(initialValue);
  }

  public convertNodeTypeToString(
    eDataType: EDataType,
    instanceValue: any
  ): string {
    return instanceValue === null ? null : JSON.stringify(instanceValue);
  }
  public createIconDataUriFromString(
    eDataType: EDataType,
    initialValue: string
  ): string {
    return initialValue == null ? null : JSON.parse(initialValue);
  }

  public convertIconDataUriToString(
    eDataType: EDataType,
    instanceValue: any
  ): string {
    return instanceValue === null ? null : JSON.stringify(instanceValue);
  }
}
