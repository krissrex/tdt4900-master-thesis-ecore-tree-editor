import { Switch } from "crossecore/lib/Switch";
import { EObject } from "crossecore/lib/EObject";
import { EPackage } from "crossecore/lib/EPackage";
import { HierarchyConfiguration } from "./HierarchyConfiguration";
import { Action } from "./Action";
import { NodeTypeToIconDataUriMap } from "./NodeTypeToIconDataUriMap";
import { TreeNode } from "./TreeNode";
import { ActionEvent } from "./ActionEvent";
import { TreeDocument } from "./TreeDocument";
import { ActionConfiguration } from "./ActionConfiguration";
import { TreedocumentmodelPackage } from "./TreedocumentmodelPackage";
import { TreedocumentmodelPackageImpl } from "./TreedocumentmodelPackageImpl";
import { NodeIcon } from "./NodeIcon";
import { NodeTypeToNodeTypesMap } from "./NodeTypeToNodeTypesMap";
import { ActionIdToNodeTypeMap } from "./ActionIdToNodeTypeMap";
export class TreedocumentmodelSwitch<T> extends Switch<T> {
  protected static modelPackage: TreedocumentmodelPackage;

  constructor() {
    super();
    if (TreedocumentmodelSwitch.modelPackage == null) {
      TreedocumentmodelSwitch.modelPackage =
        TreedocumentmodelPackageImpl.eINSTANCE;
    }
  }

  public isSwitchFor(ePackage: EPackage): boolean {
    return ePackage === TreedocumentmodelSwitch.modelPackage;
  }

  public doSwitch3(classifierID: number, theEObject: EObject): T {
    switch (classifierID) {
      case TreedocumentmodelPackageImpl.TREENODE: {
        let obj: TreeNode = <TreeNode>theEObject;
        let result: T = this.caseTreeNode(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.TREEDOCUMENT: {
        let obj: TreeDocument = <TreeDocument>theEObject;
        let result: T = this.caseTreeDocument(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.HIERARCHYCONFIGURATION: {
        let obj: HierarchyConfiguration = <HierarchyConfiguration>theEObject;
        let result: T = this.caseHierarchyConfiguration(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.NODETYPETONODETYPESMAP: {
        let obj: NodeTypeToNodeTypesMap = <NodeTypeToNodeTypesMap>theEObject;
        let result: T = this.caseNodeTypeToNodeTypesMap(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.ACTION: {
        let obj: Action = <Action>theEObject;
        let result: T = this.caseAction(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.ACTIONCONFIGURATION: {
        let obj: ActionConfiguration = <ActionConfiguration>theEObject;
        let result: T = this.caseActionConfiguration(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.ACTIONIDTONODETYPEMAP: {
        let obj: ActionIdToNodeTypeMap = <ActionIdToNodeTypeMap>theEObject;
        let result: T = this.caseActionIdToNodeTypeMap(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.NODETYPETOICONDATAURIMAP: {
        let obj: NodeTypeToIconDataUriMap = <NodeTypeToIconDataUriMap>(
          theEObject
        );
        let result: T = this.caseNodeTypeToIconDataUriMap(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.NODEICON: {
        let obj: NodeIcon = <NodeIcon>theEObject;
        let result: T = this.caseNodeIcon(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      case TreedocumentmodelPackageImpl.ACTIONEVENT: {
        let obj: ActionEvent = <ActionEvent>theEObject;
        let result: T = this.caseActionEvent(obj);
        if (result == null) result = this.defaultCase(theEObject);
        return result;
      }
      default:
        return this.defaultCase(theEObject);
    }
  }

  public caseTreeNode(object: TreeNode): T {
    return null;
  }
  public caseTreeDocument(object: TreeDocument): T {
    return null;
  }
  public caseHierarchyConfiguration(object: HierarchyConfiguration): T {
    return null;
  }
  public caseNodeTypeToNodeTypesMap(object: NodeTypeToNodeTypesMap): T {
    return null;
  }
  public caseAction(object: Action): T {
    return null;
  }
  public caseActionConfiguration(object: ActionConfiguration): T {
    return null;
  }
  public caseActionIdToNodeTypeMap(object: ActionIdToNodeTypeMap): T {
    return null;
  }
  public caseNodeTypeToIconDataUriMap(object: NodeTypeToIconDataUriMap): T {
    return null;
  }
  public caseNodeIcon(object: NodeIcon): T {
    return null;
  }
  public caseActionEvent(object: ActionEvent): T {
    return null;
  }
}
