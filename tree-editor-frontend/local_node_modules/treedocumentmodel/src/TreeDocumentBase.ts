import { OrderedSet } from "crossecore/lib/OrderedSet";
import { EClass } from "crossecore/lib/EClass";
import { NotificationChain } from "crossecore/lib/NotificationChain";
import { ENotificationImpl } from "crossecore/lib/ENotificationImpl";
import { NotificationImpl } from "crossecore/lib/NotificationImpl";
import { EMap } from "crossecore/lib/EMap";
import { AbstractCollection } from "crossecore/lib/AbstractCollection";
import { EcoreEMap } from "crossecore/lib/EcoreEMap";
import { Bag } from "crossecore/lib/Bag";
import { InternalEObject } from "crossecore/lib/InternalEObject";
import { BasicEObjectImpl } from "crossecore/lib/BasicEObjectImpl";
import { TreedocumentmodelPackageLiterals } from "./TreedocumentmodelPackageLiterals";
import { HierarchyConfiguration } from "./HierarchyConfiguration";
import { TreeNode } from "./TreeNode";
import { TreeDocument } from "./TreeDocument";
import { NodeTypeToIconDataUriMapBase } from "./NodeTypeToIconDataUriMapBase";
import { ActionConfiguration } from "./ActionConfiguration";

export class TreeDocumentBase extends BasicEObjectImpl implements TreeDocument {
  private _roots: OrderedSet<TreeNode> = null;

  get roots(): OrderedSet<TreeNode> {
    if (this._roots === null) {
      this._roots = new OrderedSet<TreeNode>(
        this,
        TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ROOTS,
        BasicEObjectImpl.EOPPOSITE_FEATURE_BASE -
          TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ROOTS
      );
    }
    return this._roots;
  }

  private _icons: EMap<string, string>;

  get icons(): EMap<string, string> {
    if (this._icons === null) {
      this._icons = new EcoreEMap<string, string>(
        NodeTypeToIconDataUriMapBase.eStaticClass,
        NodeTypeToIconDataUriMapBase,
        this,
        TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ICONS
      );
    }
    return this._icons;
  }

  private _actions: ActionConfiguration = null;
  get actions(): ActionConfiguration {
    return this._actions;
  }
  set actions(value: ActionConfiguration) {
    if (value != this.actions) {
      let msgs: NotificationChain = null;
      if (this.actions != null) {
        msgs = this.actions.eInverseRemove(
          this,
          BasicEObjectImpl.EOPPOSITE_FEATURE_BASE -
            TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS,
          /*null*/ null,
          msgs
        );
      }
      if (value != null) {
        msgs = value.eInverseAdd(
          this,
          BasicEObjectImpl.EOPPOSITE_FEATURE_BASE -
            TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS,
          /*null*/ null,
          msgs
        );
      }
      msgs = this.basicSetActions(value, msgs);
      if (msgs != null) {
        msgs.dispatch();
      }
    } else if (this.eNotificationRequired()) {
      this.eNotify(
        new ENotificationImpl(
          this,
          NotificationImpl.SET,
          TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS,
          value,
          value
        )
      );
    }
  }
  private _hierarchy: HierarchyConfiguration = null;
  get hierarchy(): HierarchyConfiguration {
    return this._hierarchy;
  }
  set hierarchy(value: HierarchyConfiguration) {
    if (value != this.hierarchy) {
      let msgs: NotificationChain = null;
      if (this.hierarchy != null) {
        msgs = this.hierarchy.eInverseRemove(
          this,
          BasicEObjectImpl.EOPPOSITE_FEATURE_BASE -
            TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY,
          /*null*/ null,
          msgs
        );
      }
      if (value != null) {
        msgs = value.eInverseAdd(
          this,
          BasicEObjectImpl.EOPPOSITE_FEATURE_BASE -
            TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY,
          /*null*/ null,
          msgs
        );
      }
      msgs = this.basicSetHierarchy(value, msgs);
      if (msgs != null) {
        msgs.dispatch();
      }
    } else if (this.eNotificationRequired()) {
      this.eNotify(
        new ENotificationImpl(
          this,
          NotificationImpl.SET,
          TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY,
          value,
          value
        )
      );
    }
  }

  public static eStaticClass: EClass;

  protected eStaticClass(): EClass {
    return TreeDocumentBase.eStaticClass;
  }

  public basicSetHierarchy(
    newobj: HierarchyConfiguration,
    msgs: NotificationChain
  ): NotificationChain {
    let oldobj = this.hierarchy;
    this.hierarchy = newobj;
    if (this.eNotificationRequired()) {
      let notification = new ENotificationImpl(
        this,
        NotificationImpl.SET,
        TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY,
        oldobj,
        newobj
      );
      if (msgs == null) {
        msgs = notification;
      } else {
        msgs.add(notification);
      }
    }
    return msgs;
  }
  public basicSetActions(
    newobj: ActionConfiguration,
    msgs: NotificationChain
  ): NotificationChain {
    let oldobj = this.actions;
    this.actions = newobj;
    if (this.eNotificationRequired()) {
      let notification = new ENotificationImpl(
        this,
        NotificationImpl.SET,
        TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS,
        oldobj,
        newobj
      );
      if (msgs == null) {
        msgs = notification;
      } else {
        msgs.add(notification);
      }
    }
    return msgs;
  }

  public eGet_number_boolean_boolean(
    featureID: number,
    resolve: boolean,
    coreType: boolean
  ): any {
    switch (featureID) {
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ROOTS:
        return this.roots;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ICONS:
        return this.icons;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS:
        return this.actions;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY:
        return this.hierarchy;
    }
    //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
    return super.eGet(featureID, resolve, coreType);
  }

  public eSet_number_any(featureID: number, newValue: any): void {
    switch (featureID) {
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ROOTS:
        this.roots.clear();
        this.roots.addAll(newValue);
        return;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ICONS:
        (<EcoreEMap<string, string>>this.icons).set(newValue);
        return;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__ACTIONS:
        this.actions = <ActionConfiguration>newValue;
        return;
      case TreedocumentmodelPackageLiterals.TREE_DOCUMENT__HIERARCHY:
        this.hierarchy = <HierarchyConfiguration>newValue;
        return;
    }
    super.eSet_number_any(featureID, newValue);
  }
}
